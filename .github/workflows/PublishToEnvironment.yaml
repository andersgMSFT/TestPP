name: ' Publish To Environment'

on:
  workflow_dispatch:
    inputs:
      appVersion:
        description: App version to deploy to environment(s) (current, prerelease, draft, latest or version number)
        required: false
        default: 'current'
      environmentName:
        description: Environment mask to receive the new version (* for all, PROD* for all environments starting with PROD)
        required: true

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: powershell

env:
  ALGoOrgSettings: ${{ vars.ALGoOrgSettings }}
  ALGoRepoSettings: ${{ vars.ALGoRepoSettings }}

jobs:
  Initialization:
    runs-on: [ windows-latest ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
      settings: ${{ steps.ReadSettings.outputs.SettingsJson }}
      environments: ${{ steps.ReadSettings.outputs.EnvironmentsJson }}
      environmentCount: ${{ steps.ReadSettings.outputs.EnvironmentCount }}
      unknownEnvironment: ${{ steps.ReadSettings.outputs.UnknownEnvironment }}
      deviceCode: ${{ steps.Authenticate.outputs.deviceCode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialize the workflow
        id: init
        uses: andersgMSFT/AL-Go-Actions/WorkflowInitialize@PPPreview
        with:
          shell: powershell
          eventId: "DO0097"

      - name: Read settings
        id: ReadSettings
        uses: andersgMSFT/AL-Go-Actions/ReadSettings@PPPreview
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
          getEnvironments: ${{ github.event.inputs.environmentName }}
          includeProduction: 'Y'

      - name: EnvName
        id: envName
        if: steps.ReadSettings.outputs.UnknownEnvironment == 1
        run: |
          $ErrorActionPreference = "STOP"
          Set-StrictMode -version 2.0
          $envName = '${{ fromJson(steps.ReadSettings.outputs.environmentsJson).matrix.include[0].environment }}'.split(' ')[0]
          Add-Content -Path $env:GITHUB_OUTPUT -Value "envName=$envName"

      - name: Read secrets
        uses: andersgMSFT/AL-Go-Actions/ReadSecrets@PPPreview
        if: steps.ReadSettings.outputs.UnknownEnvironment == 1
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
          settingsJson: ${{ env.Settings }}
          secrets: '${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext'

      - name: Authenticate
        id: Authenticate
        if: steps.ReadSettings.outputs.UnknownEnvironment == 1
        run: |
          $envName = '${{ steps.envName.outputs.envName }}'
          $secretName = ''
          $authContext = $null
          "$($envName)-AuthContext", "$($envName)_AuthContext", "AuthContext" | ForEach-Object {
            if (!($authContext)) {
              $authContext = [System.Environment]::GetEnvironmentVariable($_)
              if ($authContext) {
                Write-Host "Using $_ secret as AuthContext"
                $secretName = $_
              }
            }            
          }
          if ($authContext) {
            Write-Host "AuthContext provided in secret $secretName!"
            Set-Content -Path $ENV:GITHUB_STEP_SUMMARY -value "AuthContext was provided in a secret called $secretName. Using this information for authentication."
          }
          else {
            Write-Host "No AuthContext provided for $envName, initiating Device Code flow"
            $ALGoHelperPath = "$([System.IO.Path]::GetTempFileName()).ps1"
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile('https://raw.githubusercontent.com/andersgMSFT/AL-Go-Actions/PPPreview/AL-Go-Helper.ps1', $ALGoHelperPath)
            . $ALGoHelperPath
            $BcContainerHelperPath = DownloadAndImportBcContainerHelper -baseFolder $ENV:GITHUB_WORKSPACE
            $authContext = New-BcAuthContext -includeDeviceLogin -deviceLoginTimeout ([TimeSpan]::FromSeconds(0))
            CleanupAfterBcContainerHelper -bcContainerHelperPath $bcContainerHelperPath
            Set-Content -Path $ENV:GITHUB_STEP_SUMMARY -value "AL-Go needs access to the Business Central Environment $('${{ steps.envName.outputs.envName }}'.Split(' ')[0]) and could not locate a secret called ${{ steps.envName.outputs.envName }}_AuthContext`n`n$($authContext.message)"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "deviceCode=$($authContext.deviceCode)"
          }

  Deploy:
    needs: [ Initialization ]
    if: needs.Initialization.outputs.environmentCount > 0
    strategy: ${{ fromJson(needs.Initialization.outputs.environments) }}
    runs-on: ${{ fromJson(matrix.os) }}
    name: Deploy to ${{ matrix.environment }}
    environment:
      name: ${{ matrix.environment }}
    env:
      deviceCode: ${{ needs.Initialization.outputs.deviceCode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: EnvName
        id: envName
        run: |
          $ErrorActionPreference = "STOP"
          Set-StrictMode -version 2.0
          $envName = '${{ matrix.environment }}'.split(' ')[0]
          Add-Content -Path $env:GITHUB_OUTPUT -Value "envName=$envName"

      - name: Read settings
        uses: andersgMSFT/AL-Go-Actions/ReadSettings@PPPreview
        with:
          shell: powershell

      - name: Read secrets
        uses: andersgMSFT/AL-Go-Actions/ReadSecrets@PPPreview
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          shell: powershell
          settingsJson: ${{ env.Settings }}
          secrets: '${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext,${{ steps.envName.outputs.envName }}-EnvironmentName,${{ steps.envName.outputs.envName }}_EnvironmentName,EnvironmentName,projects'

      - name: Get Auth context
        uses: andersgMSFT/AL-Go-Actions/ReadAuthContext@PPPreview
        with: 
          shell: powershell
          envName: ${{ steps.envName.outputs.envName }}
          environment: ${{ steps.envName.outputs.envName }}

      - name: Deploy AL
        uses: andersgMSFT/AL-Go-Actions/Deploy@PPPreview
        env:
          AuthContext: ${{ env.authContext }}
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          type: 'Publish'
          projects: ${{ env.projects }}
          environmentName: ${{ env.environmentName }}
          artifacts: ${{ github.event.inputs.appVersion }}

      - name: Get Artifacts
        uses: andersgMSFT/AL-Go-Actions/GetArtifacts@PPPreview
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          artifactVersion: ${{ github.event.inputs.appVersion }}

      - name: Deploy PowerPlatform
        if: ${{ env.deployPP == 'true' }}
        uses: andersgMSFT/AL-Go-Actions/DeployPowerPlatform@PPPreview
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          artifactPath: '.artifacts'
          deploySettings: ${{ env.deployTo }} 
          authSettings: ${{ env.authContext }}

  PostProcess:
    if: always()
    runs-on: [ windows-latest ]
    needs: [ Initialization, Deploy ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Finalize the workflow
        id: PostProcess
        uses: andersgMSFT/AL-Go-Actions/WorkflowPostProcess@PPPreview
        with:
          shell: powershell
          eventId: "DO0097"
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
